# -*- coding: utf-8 -*-
"""ASK, FSK, PSK Simulation in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ko4uOv_HRoDQCJCu4uuC3dmrKyips4sv
"""

import numpy as np
import matplotlib.pyplot as plt

# Input
bits = [1, 0, 1, 1, 0]   # Example input
fc = 5                   # Carrier frequency
bit_duration = 1
fs = 1000                # Sampling frequency

t_total = np.array([])
original_bits = np.array([])
ASK = np.array([])
FSK = np.array([])
PSK = np.array([])

for idx, bit in enumerate(bits):
    t = np.arange(idx, idx + bit_duration, 1/fs)

    # Original bit waveform
    original_bits = np.concatenate((original_bits, bit * np.ones(len(t))))

    # ASK
    ask_wave = bit * np.sin(2 * np.pi * fc * t)
    ASK = np.concatenate((ASK, ask_wave))

    # FSK
    if bit == 1:
        fsk_wave = np.sin(2 * np.pi * (fc + 2) * t)
    else:
        fsk_wave = np.sin(2 * np.pi * (fc - 2) * t)
    FSK = np.concatenate((FSK, fsk_wave))

    # PSK
    psk_wave = np.sin(2 * np.pi * fc * t + np.pi * (bit == 0))
    PSK = np.concatenate((PSK, psk_wave))

    # Total time
    t_total = np.concatenate((t_total, t))

# Plotting
plt.figure(figsize=(10, 8))

plt.subplot(4, 1, 1)
plt.plot(t_total, original_bits, 'k', linewidth=2)
plt.title('Input Bits')
plt.ylim([-0.2, 1.2])
plt.ylabel('Bit Value')
plt.grid(True)

plt.subplot(4, 1, 2)
plt.plot(t_total, ASK, 'b', linewidth=1.5)
plt.title('ASK (Amplitude Shift Keying)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.subplot(4, 1, 3)
plt.plot(t_total, FSK, 'r', linewidth=1.5)
plt.title('FSK (Frequency Shift Keying)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.subplot(4, 1, 4)
plt.plot(t_total, PSK, 'g', linewidth=1.5)
plt.title('PSK (Phase Shift Keying)')
plt.ylabel('Amplitude')
plt.xlabel('Time (seconds)')
plt.grid(True)

plt.tight_layout()
plt.show()